"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var User = /** @class */ (function () {
    function User(api) {
        var _this = this;
        this.api = api;
        this.nextURL = null;
        /**
         * Gets a user by URL or ID.
         */
        this.get = function (userResolvable) { return __awaiter(_this, void 0, void 0, function () {
            var userId, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = String(userResolvable).match(/\d{8,}/);
                        if (!userId)
                            return [2 /*return*/, Promise.reject("Invalid id or url provided.")];
                        return [4 /*yield*/, this.detail({ user_id: Number(userId[0]) })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        }); };
        /**
         * Gets a detailed user profile.
         */
        this.detail = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api.get("/v1/user/detail", params)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        }); };
        /**
         * Gets all illusts by the user.
         */
        this.illusts = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api.get("/v1/user/illusts", params)];
                    case 1:
                        response = _a.sent();
                        this.nextURL = response.next_url;
                        return [2 /*return*/, response.illusts];
                }
            });
        }); };
        /**
         * Gets all novels by the user.
         */
        this.novels = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api.get("/v1/user/novels", params)];
                    case 1:
                        response = _a.sent();
                        this.nextURL = response.next_url;
                        response.novels.forEach(function (i) { return i.url = "https://www.pixiv.net/novel/show.php?id=" + i.id; });
                        response.novels.forEach(function (i) { return i.type = "novel"; });
                        return [2 /*return*/, response.novels];
                }
            });
        }); };
        /**
         * Gets all the public bookmarked illusts by the user.
         */
        this.bookmarksIllust = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!params.restrict)
                            params.restrict = "public";
                        return [4 /*yield*/, this.api.get("/v1/user/bookmarks/illust", params)];
                    case 1:
                        response = _a.sent();
                        this.nextURL = response.next_url;
                        return [2 /*return*/, response.illusts];
                }
            });
        }); };
        /**
         * Gets bookmark illust tags.
         */
        this.bookmarkIllustTags = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!params)
                            params = {};
                        params.restrict = "public";
                        return [4 /*yield*/, this.api.get("/v1/user/bookmark-tags/illust", params)];
                    case 1:
                        response = _a.sent();
                        this.nextURL = response.next_url;
                        return [2 /*return*/, response.bookmark_tags];
                }
            });
        }); };
        /**
         * Gets details on a bookmark.
         */
        this.bookmarkDetail = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api.get("/v2/illust/bookmark/detail", params)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        }); };
        /**
         * Gets a user's public bookmarked novels.
         */
        this.bookmarksNovel = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!params.restrict)
                            params.restrict = "public";
                        return [4 /*yield*/, this.api.get("/v1/user/bookmarks/novel", params)];
                    case 1:
                        response = _a.sent();
                        response.novels.forEach(function (i) { return i.url = "https://www.pixiv.net/novel/show.php?id=" + i.id; });
                        response.novels.forEach(function (i) { return i.type = "novel"; });
                        this.nextURL = response.next_url;
                        return [2 /*return*/, response.novels];
                }
            });
        }); };
        /**
         * Fetches bookmark novel tags.
         */
        this.bookmarkNovelTags = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!params.restrict)
                            params.restrict = "public";
                        return [4 /*yield*/, this.api.get("/v1/user/bookmark-tags/novel", params)];
                    case 1:
                        response = _a.sent();
                        this.nextURL = response.next_url;
                        return [2 /*return*/, response.bookmark_tags];
                }
            });
        }); };
        /**
         * Fetches the users a user is following.
         */
        this.following = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!params.restrict)
                            params.restrict = "public";
                        return [4 /*yield*/, this.api.get("/v1/user/following", params)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        }); };
        /**
         * Fetches the followers of a user.
         */
        this.followers = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api.get("/v1/user/follower", params)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        }); };
        /**
         * Gets the MyPixiv of a user.
         */
        this.myPixiv = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api.get("/v1/user/mypixiv", params)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        }); };
        /**
         * Gets recommended users.
         */
        this.recommended = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api.get("/v1/user/recommended", params)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        }); };
        /**
         * Gets details on a user follow.
         */
        this.followDetail = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api.get("/v1/user/follow/detail", params)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        }); };
    }
    return User;
}());
exports.User = User;
